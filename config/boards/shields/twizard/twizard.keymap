#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define TTERM   300
#define DEFAULT 0
#define FUN     1
#define NAV     2
#define EXT     3
#define NUM     4

&mt { tapping-term-ms = <TTERM>; };
/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <TTERM>;
            quick-tap-ms = <125>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        gqt: global-quick-tap {
            compatible = "zmk,behavior-hold-tap";
            label = "GLOBAL_QUICK_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TTERM>;
            quick-tap-ms = <125>;
            global-quick-tap;
            bindings = <&kp>, <&kp>;
        };
    };
    
    
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
                &kp Q           &kp W           &kp E           &kp R           &kp T                   &kp Y           &kp U           &kp I           &kp O           &kp P
                &kp A           &mt LALT S      &mt LCTRL D     &mt LSHFT F     &kp G                   &kp H           &mt RSHFT J     &mt RCTRL K     &mt RALT L      &kp SQT
                &lt NAV Z       &kp X           &kp C           &kp V           &kp B                   &kp N           &kp M           &kp COMMA       &kp DOT         &lt NUM FSLH
                                &mt LGUI TAB    &lt FUN BSPC    &lt EXT DEL     &to NUM                 &kp C_PLAY      &lt EXT ENTER   &lt NAV SPACE   &mt RGUI ESC
            >;
            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        fun_layer {
            bindings = <
                &kp F2          &kp F3          &kp F4          &kp F5          &kp F6                  &kp F7          &kp F8          &kp F9          &kp F10         &kp F11
                &kp EXCL        &kp AT          &kp HASH        &kp DLLR        &kp PRCNT               &kp CARET       &kp AMPS        &kp ASTRK       &kp LPAR        &kp RPAR
                &kp F1          &kp F12         &kp PIPE        &kp PSCRN       &kp LC(PSCRN)           &kp TILDE       &kp UNDER       &kp PLUS        &kp LBKT        &kp RBKT
                                &kp TAB         &trans          &trans          &trans                  &trans          &caps_word      &mo EXT         &kp ESC
            >;
            sensor-bindings = <&inc_dec_kp LS(LC(TAB)) LC(TAB) &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        nav_layer {
            bindings = <
                &kp N1          &kp N2          &kp N3          &kp N4          &kp N5                  &kp N6          &kp N7          &kp N8          &kp N9          &kp N0
                &kp LCTRL       &kp LBRC        &kp RBRC        &kp PG_UP       &kp HOME                &kp BSLH        &kp LEFT        &kp DOWN        &kp UP          &kp RIGHT
                &kp LSHFT       &kp LBKT        &kp RBKT        &kp PG_DN       &kp END					&kp GRAVE       &kp MINUS       &kp EQUAL       &kp COLON       &kp SEMI
                                &kp TAB         &mo EXT         &caps_word      &trans                  &trans          &trans          &kp SPACE       &kp ESC
            >;
            sensor-bindings = <&inc_dec_kp PG_UP PG_DN &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };		


        ext_layer {
            bindings = <
                &bootloader     &kp LC(W)       &kp UP          &kp ENTER       &kp INSERT              &none           &none           &none           &none           &bootloader
                &kp CAPS        &kp LEFT        &kp DOWN        &kp RIGHT       &kp PAUSE_BREAK         &bt BT_SEL 0    &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4
                &kp K_SLEEP     &kp F13         &kp F14         &kp F15         &kp RC(RA(L))           &kp RC(RA(L))   &none           &none           &none           &bt BT_CLR
                                &kp TAB         &kp BSPC        &trans          &trans                  &trans          &trans          &kp SPACE       &kp ESC
            >;
            sensor-bindings = <&inc_dec_kp LS(LC(TAB)) LC(TAB) &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        num_layer {
            bindings = <
                &none           &none           &kp UP          &kp SLCK        &kp KP_NUM              &kp KP_DIVIDE   &kp KP_N7       &kp KP_N8       &kp KP_N9       &kp KP_MINUS
                &kp CAPS        &kp LEFT        &kp DOWN        &kp RIGHT       &none                   &kp KP_MULTIPLY &kp KP_N4       &kp KP_N5       &kp KP_N6       &kp KP_PLUS
                &none           &none           &none           &none           &none                   &kp KP_N0       &kp KP_N1       &kp KP_N2       &kp KP_N3       &kp KP_ENTER
                                &kp TAB         &kp BSPC        &kp DEL         &to DEFAULT             &trans          &kp KP_DOT      &kp LALT        &kp COLON
            >;
            sensor-bindings = <&inc_dec_kp UP DOWN &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_LBRC {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp LBRC>;
        };
        combo_RBRC {
            timeout-ms = <50>;
            key-positions = <7 8>;
            bindings = <&kp RBRC>;
        };
        combo_LPAR {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp LPAR>;
        };
        combo_RPAR {
            timeout-ms = <50>;
            key-positions = <17 18>;
            bindings = <&kp RPAR>;
        };
        combo_LBKT {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp LBKT>;
        };
        combo_RBKT {
            timeout-ms = <50>;
            key-positions = <27 28>;
            bindings = <&kp RBKT>;
        };
        
        
        combo_PREV {
            timeout-ms = <50>;
            key-positions = <1 2>;
            bindings = <&kp C_PREV>;
        };
        combo_NEXT {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp C_NEXT>;
        };
        combo_MINUS {
            timeout-ms = <50>;
            key-positions = <5 15>;
            bindings = <&kp MINUS>;
        };
        combo_UNDER {
            timeout-ms = <50>;
            key-positions = <15 25>;
            bindings = <&kp UNDER>;
        };


        combo_SEMI {
            timeout-ms = <50>;
            key-positions = <18 19>;
            bindings = <&kp SEMI>;
        };
        combo_COLON {
            timeout-ms = <50>;
            key-positions = <28 29>;
            bindings = <&kp COLON>;
        };
        combo_UNDO {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp RC(Z)>;
        };
        combo_COPY {
            timeout-ms = <50>;
            key-positions = <21 22>;
            bindings = <&kp RC(C)>;
        };
        combo_PSTE {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp RC(V)>;
        };

        
        combo_LESC {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
        combo_RESC {
            timeout-ms = <50>;
            key-positions = <8 9>;
            bindings = <&kp ESC>;
        };
        combo_CSCR {
            timeout-ms = <50>;
            key-positions = <2 12>;
            bindings = <&kp LC(PSCRN)>;
        };
        combo_PSCR {
            timeout-ms = <50>;
            key-positions = <3 13>;
            bindings = <&kp PSCRN>;
        };
        combo_CTAB {
            timeout-ms = <50>;
            key-positions = <4 14>;
            bindings = <&kp LC(LS(T))>;
        };

        
        combo_KTAB {
            timeout-ms = <50>;
            key-positions = <10 11>;
            bindings = <&kp TAB>;
        };
        combo_KILL {
            timeout-ms = <50>;
            key-positions = <23 24>;
            bindings = <&kp LA(F4)>;
        };
    };
};